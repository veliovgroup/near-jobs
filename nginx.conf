# my-meteor-app/nginx.conf

server {
  listen 80;
  listen [::]:80;
  server_name jobs.nearspace.info;

  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name jobs.nearspace.info;

  # TLS CERTIFICATES
  ssl_certificate /etc/letsencrypt/live/jobs.nearspace.info/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/jobs.nearspace.info/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # STATIC FILES LOCATION
  root /var/www/near-jobs/public;
  # APPLICATION LOCATION
  passenger_app_root /var/www/near-jobs;

  add_header Referrer-Policy origin;

  charset utf-8;
  default_type text/html;

  # IF REQUEST IS SENT TO STATIC FILE
  # WHICHG DOES NOT EXISTS â€” FORWARD REQUETS TO NODE.JS
  recursive_error_pages on;
  error_page 404 = @application;

  # SET/DEFINE ENVIRONMENT VARIABLES
  include /etc/nginx/secrets.near-jobs.conf;

  # PASSENGER SETTINGS
  passenger_app_type node;
  passenger_startup_file main.js;
  # SET passenger_sticky_sessions TO `on`
  # TO ENABLE "STICKY" SESSIONS ACROSS
  # MULTI-SERVER INFRASTRUCTURE
  passenger_sticky_sessions off;
  # ALWAYS RUN AT LEAT ONE INSTANCE OF THE APP
  passenger_min_instances 1;
  # path to node.js executable
  # This can be changed per server if
  # different application with different
  # requirement to meteor/node version is
  # running on the same sever
  #
  # As of Oct 2020 Meteor@2.2.* required node@12.18.4
  # Get this value by calling (!as appuser):
  # nvm which v12.22.1
  passenger_nodejs /home/appuser/.nvm/versions/node/v12.22.1/bin/node;

  location / {
    # CHECK IF REQUEST SENT TO STATIC FILE
    # IF NOT FORWARD REQUEST TO NODE.JS
    try_files $uri @application;
  }

  location @application {
    # OPTIMIZE HTTP FOR SERVING CODE
    proxy_http_version 1.1;

    # ENABLE PASSENGER
    passenger_enabled on;
    break;
  }

  location /sockjs/ {
    # OPTIMIZE HTTP FOR SOCKJS
    sendfile off;
    proxy_http_version 1.1;
    proxy_no_cache 1;
    proxy_cache_bypass 1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # ENABLE PASSENGER
    passenger_enabled on;
    break;
  }
}
